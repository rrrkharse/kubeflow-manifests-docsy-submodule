<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubeflow on AWS â€“ Add-ons</title>
    <link>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/</link>
    <description>Recent content in Add-ons on Kubeflow on AWS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: EFS</title>
      <link>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/storage/efs/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/storage/efs/guide/</guid>
      <description>
        
        
        &lt;p&gt;This guide describes how to use Amazon EFS as Persistent storage on top of an existing Kubeflow deployment.&lt;/p&gt;
&lt;h2 id=&#34;10-prerequisites&#34;&gt;1.0 Prerequisites&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;For this README, we will assume that you already have an EKS Cluster with Kubeflow installed since the EFS CSI Driver can be installed and configured as a separate resource on top of an existing Kubeflow deployment. You can follow any of the other guides to complete these steps - choose one of the &lt;a href=&#34;../../../README.md#deployment-options&#34;&gt;AWS managed service integrated offering&lt;/a&gt; or &lt;a href=&#34;../../../vanilla/README.md&#34;&gt;vanilla distribution&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Important :&lt;/strong&gt;
You must make sure you have an &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html&#34;&gt;OIDC provider&lt;/a&gt; for your cluster and that it was added from &lt;code&gt;eksctl&lt;/code&gt; &amp;gt;= &lt;code&gt;0.56&lt;/code&gt; or if you already have an OIDC provider in place, then you must make sure you have the tag &lt;code&gt;alpha.eksctl.io/cluster-name&lt;/code&gt; with the cluster name as its value. If you don&amp;rsquo;t have the tag, you can add it via the AWS Console by navigating to IAM-&amp;gt;Identity providers-&amp;gt;Your OIDC-&amp;gt;Tags.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;At this point, you have likely cloned this repo and checked out the right branch. Let&amp;rsquo;s save this path to help us naviagte to different paths in the rest of this doc -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export GITHUB_ROOT=$(pwd)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Make sure the following environment variables are set.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLUSTER_NAME=&amp;lt;clustername&amp;gt;
export CLUSTER_REGION=&amp;lt;clusterregion&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;20-setup-efs&#34;&gt;2.0 Setup EFS&lt;/h2&gt;
&lt;p&gt;You can either use Automated or Manual setup to set up the resources required. If you choose the manual route, you get another choice between static and dynamic provisioning, so pick whichever suits you. On the other hand, for the automated script we currently only support dynamic provisioning. Whichever combination you pick, be sure to continue picking the appropriate sections through the rest of this guide.&lt;/p&gt;
&lt;h3 id=&#34;21-option-1-automated-setup&#34;&gt;2.1 [Option 1] Automated setup&lt;/h3&gt;
&lt;p&gt;The script automates all the manual resource creation steps but is currently only available for Dynamic Provisioning option.&lt;br&gt;
It performs the required cluster configuration, creates an EFS file system and it also takes care of creating a storage class for dynamic provisioning. Once done, move to section 3.0.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the following commands from the &lt;code&gt;tests/e2e&lt;/code&gt; directory as -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd $GITHUB_ROOT/tests/e2e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Install the script dependencies&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Run the automated script as follows. You can skip specifying the &lt;code&gt;efs_file_system_name&lt;/code&gt; and &lt;code&gt;efs_security_group_name&lt;/code&gt; if you are running the command for the first time in your account and want to use default values -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export FILESYSTEM_NAME=&amp;lt;fs_name&amp;gt;
export SG_NAME=&amp;lt;sg_name&amp;gt;

python utils/auto-efs-setup.py --region $CLUSTER_REGION --cluster $CLUSTER_NAME --efs_file_system_name $FILESYSTEM_NAME --efs_security_group_name $SG_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;advanced-customization&#34;&gt;&lt;strong&gt;Advanced customization&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The script applies some default values for the file system name, performance mode etc. If you know what you are doing, you can see which options are customizable by executing &lt;code&gt;python utils/auto-efs-setup.py --help&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;22-option-2-manual-setup&#34;&gt;2.2 [Option 2] Manual setup&lt;/h3&gt;
&lt;p&gt;If you prefer to manually setup each components then you can follow this manual guide.  As mentioned, it you have two options between Static and Dynamic provisioing later in step 4 of this section.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query &amp;#34;Account&amp;#34; --output text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;1-install-the-efs-csi-driver&#34;&gt;1. Install the EFS CSI Driver&lt;/h4&gt;
&lt;p&gt;We recommend installing the EFS CSI Driver v1.3.4 directly from the &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-efs-csi-driver&#34;&gt;the aws-efs-csi-driver github repo&lt;/a&gt; as follows -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl apply -k &amp;#34;github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/?ref=tags/v1.3.4&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can confirm that EFS CSI Driver was installed into the default kube-system namespace for you. You can check using the following command -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl get csidriver

NAME              ATTACHREQUIRED   PODINFOONMOUNT   MODES        AGE
efs.csi.aws.com   false            false            Persistent   5d17h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-create-the-iam-policy-for-the-csi-driver&#34;&gt;2. Create the IAM Policy for the CSI Driver&lt;/h4&gt;
&lt;p&gt;The CSI driver&amp;rsquo;s service account (created during installation) requires IAM permission to make calls to AWS APIs on your behalf. Here, we will be annotating the Service Account &lt;code&gt;efs-csi-controller-sa&lt;/code&gt; with an IAM Role which has the required permissions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the IAM policy document from GitHub as follows -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;curl -o iam-policy-example.json https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/v1.3.4/docs/iam-policy-example.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create the policy -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;aws iam create-policy \
    --policy-name AmazonEKS_EFS_CSI_Driver_Policy \
    --policy-document file://iam-policy-example.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create an IAM role and attach the IAM policy to it. Annotate the Kubernetes service account with the IAM role ARN and the IAM role with the Kubernetes service account name. You can create the role using eksctl as follows -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;eksctl create iamserviceaccount \
    --name efs-csi-controller-sa \
    --namespace kube-system \
    --cluster $CLUSTER_NAME \
    --attach-policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/AmazonEKS_EFS_CSI_Driver_Policy \
    --approve \
    --override-existing-serviceaccounts \
    --region $CLUSTER_REGION
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;You can verify by describing the specified service account to check if it has been correctly annotated -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl describe -n kube-system serviceaccount efs-csi-controller-sa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-manually-create-an-instance-of-the-efs-filesystem&#34;&gt;3. Manually Create an Instance of the EFS Filesystem&lt;/h4&gt;
&lt;p&gt;Please refer to the official &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html#efs-create-filesystem&#34;&gt;AWS EFS CSI Document&lt;/a&gt; for detailed instructions on creating an EFS filesystem.&lt;/p&gt;
&lt;p&gt;Note: For this README, we have assumed that you are creating your EFS Filesystem in the same VPC as your EKS Cluster.&lt;/p&gt;
&lt;h4 id=&#34;choose-between-dynamic-and-static-provisioning&#34;&gt;Choose between dynamic and static provisioning&lt;/h4&gt;
&lt;p&gt;In the following section, you have to choose between setting up &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/&#34;&gt;dynamic provisioning&lt;/a&gt; or setting up static provisioning.&lt;/p&gt;
&lt;p&gt;For this section, navigate to the storage directory in docs as -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd $GITHUB_ROOT/docs/deployment/add-ons/storage/efs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-option-1-dynamic-provisioning&#34;&gt;4. [Option 1] Dynamic Provisioning&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Use the &lt;code&gt;$file_system_id&lt;/code&gt; you recorded in section 3 above or use the AWS Console to get the filesystem id of the EFS file system you want to use. Now edit the &lt;code&gt;dynamic-provisioning/sc.yaml&lt;/code&gt; file by chaning &lt;code&gt;&amp;lt;YOUR_FILE_SYSTEM_ID&amp;gt;&lt;/code&gt; with your &lt;code&gt;fs-xxxxxx&lt;/code&gt; file system id. You can also change it using the following command :&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;file_system_id=$file_system_id yq e &amp;#39;.parameters.fileSystemId = env(file_system_id)&amp;#39; -i dynamic-provisioning/sc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create the storage class using the following command :&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl apply -f dynamic-provisioning/sc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Verify your setup by checking which storage classes are created for your cluster. You can use the following command&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl get sc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note : The &lt;code&gt;StorageClass&lt;/code&gt; is a cluster scoped resource which means we only need to do this step once per cluster.&lt;/p&gt;
&lt;h4 id=&#34;4-option-2-static-provisioning&#34;&gt;4. [Option 2] Static Provisioning&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-efs-csi-driver/tree/master/examples/kubernetes/multiple_pods&#34;&gt;Using this sample from official AWS Docs&lt;/a&gt; we have provided the required spec files in the sample subdirectory but you can create the PVC another way.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the &lt;code&gt;$file_system_id&lt;/code&gt; you recorded in section 3 above or use the AWS Console to get the filesystem id of the EFS file system you want to use. Now edit the last line of the static-provisioning/pv.yaml file to specify the &lt;code&gt;volumeHandle&lt;/code&gt; field to point to your EFS filesystem. Replace &lt;code&gt;$file_system_id&lt;/code&gt; if it is not already set.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;file_system_id=$file_system_id yq e &amp;#39;.spec.csi.volumeHandle = env(file_system_id)&amp;#39; -i static-provisioning/pv.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;The &lt;code&gt;PersistentVolume&lt;/code&gt; and &lt;code&gt;StorageClass&lt;/code&gt; are cluster scoped resources but the &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; needs to be in the namespace you will be accessing it from. Replace the &lt;code&gt;kubeflow-user-example-com&lt;/code&gt; namespace specified the below with the namespace for your kubeflow user and edit the &lt;code&gt;static-provisioning/pvc.yaml&lt;/code&gt; file accordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export PVC_NAMESPACE=kubeflow-user-example-com
yq e &amp;#39;.metadata.namespace = env(PVC_NAMESPACE)&amp;#39; -i static-provisioning/pvc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Now create the required persistentvolume, persistentvolumeclaim and storageclass resources as -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl apply -f static-provisioning/sc.yaml
kubectl apply -f static-provisioning/pv.yaml
kubectl apply -f static-provisioning/pvc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Check your Setup
Use the following commands to ensure all resources have been deployed as expected and the PersistentVolume is correctly bound to the PersistentVolumeClaim&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl get pv

NAME    CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                 STORAGECLASS   REASON   AGE
efs-pv  5Gi        RWX            Retain           Bound    kubeflow-user-example-com/efs-claim   efs-sc                  5d16h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl get pvc -n $PVC_NAMESPACE

NAME        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE
efs-claim   Bound    efs-pv   5Gi        RWX            efs-sc         5d16h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, Port Forward as needed and Login to the Kubeflow dashboard. You can also check the &lt;code&gt;Volumes&lt;/code&gt; tab in Kubeflow and you should be able to see your PVC is available for use within Kubeflow.
In the following two sections we will be using this PVC to create a notebook server with Amazon EFS mounted as the workspace volume, download training data into this filesystem and then deploy a TFJob to train a model using this data.&lt;/p&gt;
&lt;h2 id=&#34;30-using-efs-storage-in-kubeflow&#34;&gt;3.0 Using EFS Storage in Kubeflow&lt;/h2&gt;
&lt;h3 id=&#34;31-set-up-the-environment&#34;&gt;3.1 Set up the environment&lt;/h3&gt;
&lt;p&gt;For the following sections, make sure to navigate back to the docs folder at the following path -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd $GITHUB_ROOT/docs/deployment/add-ons/storage/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and also export the namespace as -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export PVC_NAMESPACE=kubeflow-user-example-com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;export the claim name you plan to use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLAIM_NAME=efs-claim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-changing-the-default-storage-class&#34;&gt;3.2 Changing the default Storage Class&lt;/h3&gt;
&lt;p&gt;After installing Kubeflow, you can change the default Storage Class from &lt;code&gt;gp2&lt;/code&gt; to the efs storage class you created during the setup. For instance, if you followed the automatic or manual steps, you should have a storage class named &lt;code&gt;efs-sc&lt;/code&gt;. You can check your storage classes by running &lt;code&gt;kubectl get sc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is can be useful if your notebook configuration is set to use the default storage class (it is the case by default). By changing the default storage class, when creating workspace volumes for your notebooks, it will use your EFS storage class automatically. This is not mandatory as you can also manually create a PVC and select the &lt;code&gt;efs-sc&lt;/code&gt; class via the Volume UI but can facilitate the notebook creation process and automatically select this class when creating volume in the UI. You can also decide to keep using &lt;code&gt;gp2&lt;/code&gt; for workspace volumes and keep the EFS storage class for datasets/data volumes only.&lt;/p&gt;
&lt;p&gt;To learn more about how to change the default Storage Class, you can refer to the &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/#changing-the-default-storageclass&#34;&gt;official Kubernetes documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance, if you have a default class set to &lt;code&gt;gp2&lt;/code&gt; and another class &lt;code&gt;efs-sc&lt;/code&gt;, then you would need to do the following :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remove &lt;code&gt;gp2&lt;/code&gt; as your default storage class&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl patch storageclass gp2 -p &amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;annotations&amp;#34;:{&amp;#34;storageclass.kubernetes.io/is-default-class&amp;#34;:&amp;#34;false&amp;#34;}}}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Set &lt;code&gt;efs-sc&lt;/code&gt; as your default storage class&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl patch storageclass efs-sc -p &amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;annotations&amp;#34;:{&amp;#34;storageclass.kubernetes.io/is-default-class&amp;#34;:&amp;#34;true&amp;#34;}}}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: As mentioned, make sure to change your default storage class only after you have completed your Kubeflow deployment. The default Kubeflow components may not work well with a different storage class.&lt;/p&gt;
&lt;h3 id=&#34;33-note-about-permissions&#34;&gt;3.3 Note about Permissions&lt;/h3&gt;
&lt;p&gt;This step may not be necessary but you might need to specify some additional directory permissions on your worker node before you can use these as mount points. By default, new Amazon EFS file systems are owned by root:root, and only the root user (UID 0) has read-write-execute permissions. If your containers are not running as root, you must change the Amazon EFS file system permissions to allow other users to modify the file system. The set-permission-job.yaml is an example of how you could set these permissions to be able to use the efs as your workspace in your kubeflow notebook. Modify it accordingly if you run into similar permission issues with any other job pod.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLAIM_NAME=efs-claim
yq e &amp;#39;.metadata.name = env(CLAIM_NAME)&amp;#39; -i notebook-sample/set-permission-job.yaml
yq e &amp;#39;.metadata.namespace = env(PVC_NAMESPACE)&amp;#39; -i notebook-sample/set-permission-job.yaml
yq e &amp;#39;.spec.template.spec.volumes[0].persistentVolumeClaim.claimName = env(CLAIM_NAME)&amp;#39; -i notebook-sample/set-permission-job.yaml

kubectl apply -f notebook-sample/set-permission-job.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;34-creating-and-using-efs-volumes-as-workspace-or-data-volume-for-a-notebook-dynamic-provisioning&#34;&gt;3.4 Creating and using EFS volumes as workspace or data volume for a notebook (Dynamic Provisioning)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Important : The following example only works if you setup dynamic provisioning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is an example that illustrates how to create a PVC for your dataset in &lt;code&gt;ReadWriteMany&lt;/code&gt; mode meaning it can be used by many notebooks at the same time as well as how to create a notebook with a workspace volume for the notebook data and how to specify that you want to use your dataset volume as data volume.
Note that both of these volumes are created under the storage class &lt;code&gt;efs-sc&lt;/code&gt; which represents the EFS storage class created earlier.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/26939775/153103745-70f93ac5-88f3-4387-b40d-b585fca80af4.mp4&#34;&gt;https://user-images.githubusercontent.com/26939775/153103745-70f93ac5-88f3-4387-b40d-b585fca80af4.mp4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;35-using-existing-efs-volume-as-workspace-or-data-volume-for-a-notebook-static-provisioning&#34;&gt;3.5 Using existing EFS volume as workspace or data volume for a notebook (Static Provisioning)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Important : The following example only works if you setup static provisioning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spin up a new Kubeflow notebook server and specify the name of the PVC to be used as the workspace volume or the data volume and specify your desired mount point. We&amp;rsquo;ll assume you created a PVC with the name &lt;code&gt;efs-claim&lt;/code&gt; via Kubeflow Volumes UI or via the manual setup step &lt;a href=&#34;./README.md#4-option-2-static-provisioning&#34;&gt;Static Provisioning&lt;/a&gt;. For our example here, we are using the AWS Optimized Tensorflow 2.6 CPU image provided in the notebook configuration options - &lt;code&gt;public.ecr.aws/c9e4w0g3/notebook-servers/jupyter-tensorflow&lt;/code&gt;. Additionally, use the existing &lt;code&gt;efs-claim&lt;/code&gt; volume as the workspace volume at the default mount point &lt;code&gt;/home/jovyan&lt;/code&gt;. The server might take a few minutes to come up.&lt;/p&gt;
&lt;p&gt;In case the server does not start up in the expected time, do make sure to check -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Notebook Controller Logs&lt;/li&gt;
&lt;li&gt;The specific notebook server instance pod&amp;rsquo;s logs&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;36-using-efs-volume-for-a-trainingjob-using-tfjob-operator&#34;&gt;3.6 Using EFS volume for a TrainingJob using TFJob Operator&lt;/h3&gt;
&lt;p&gt;The following section re-uses the PVC and the Tensorflow Kubeflow Notebook created in the previous steps to download a dataset to the EFS Volume. Then we spin up a TFjob which runs a image classification job using the data from the shared volume.
Source: &lt;a href=&#34;https://www.tensorflow.org/tutorials/load_data/images&#34;&gt;https://www.tensorflow.org/tutorials/load_data/images&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: The following steps are run from the terminal on your gateway node connected to your EKS cluster and not from the Kubeflow Notebook to test the PVC allowed sharing of data as expected.&lt;/p&gt;
&lt;h4 id=&#34;1-download-the-dataset-to-the-efs-volume&#34;&gt;1. Download the dataset to the EFS Volume&lt;/h4&gt;
&lt;p&gt;In the Kubeflow Notebook created above, use the following snippet to download the data into the &lt;code&gt;/home/jovyan/.keras&lt;/code&gt; directory (which is mounted onto the EFS Volume).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import pathlib
import tensorflow as tf
dataset_url = &amp;#34;https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz&amp;#34;
data_dir = tf.keras.utils.get_file(origin=dataset_url,
                                   fname=&amp;#39;flower_photos&amp;#39;,
                                   untar=True)
data_dir = pathlib.Path(data_dir)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-build-and-push-the-docker-image&#34;&gt;2. Build and Push the Docker image&lt;/h4&gt;
&lt;p&gt;In the &lt;code&gt;training-sample&lt;/code&gt; directory, we have provided a sample training script and Dockerfile which you can use as follows to build a docker image. Be sure to point the &lt;code&gt;$IMAGE_URI&lt;/code&gt; to your registry and specify an appropriate tag -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export IMAGE_URI=&amp;lt;dockerimage:tag&amp;gt;
cd training-sample

# You will need to login to ECR for the following steps
docker build -t $IMAGE_URI .
docker push $IMAGE_URI
cd -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-configure-the-tfjob-spec-file&#34;&gt;3. Configure the tfjob spec file&lt;/h4&gt;
&lt;p&gt;Once the docker image is built, replace the &lt;code&gt;&amp;lt;dockerimage:tag&amp;gt;&lt;/code&gt; in the &lt;code&gt;tfjob.yaml&lt;/code&gt; file, line #17.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;yq e &amp;#39;.spec.tfReplicaSpecs.Worker.template.spec.containers[0].image = env(IMAGE_URI)&amp;#39; -i training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, specify the name of the PVC you created -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLAIM_NAME=efs-claim
yq e &amp;#39;.spec.tfReplicaSpecs.Worker.template.spec.volumes[0].persistentVolumeClaim.claimName = env(CLAIM_NAME)&amp;#39; -i training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure to run it in the same namespace as the claim -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;yq e &amp;#39;.metadata.namespace = env(PVC_NAMESPACE)&amp;#39; -i training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-create-the-tfjob-and-use-the-provided-commands-to-check-the-training-logs&#34;&gt;4. Create the TFjob and use the provided commands to check the training logs&lt;/h4&gt;
&lt;p&gt;At this point, we are ready to train the model using the &lt;code&gt;training-sample/training.py&lt;/code&gt; script and the data available on the shared volume with the Kubeflow TFJob operator as -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl apply -f training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to check that the training job is running as expected, you can check the events in the TFJob describe response as well as the job logs as -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl describe tfjob image-classification-pvc -n $PVC_NAMESPACE
kubectl logs -n $PVC_NAMESPACE image-classification-pvc-worker-0 -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;40-cleanup&#34;&gt;4.0 Cleanup&lt;/h2&gt;
&lt;p&gt;This section cleans up the resources created in this README, to cleanup other resources such as the Kubeflow deployment, please refer to the high level README files.&lt;/p&gt;
&lt;h3 id=&#34;41-clean-up-the-tfjob&#34;&gt;4.1 Clean up the TFJob&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete tfjob -n $PVC_NAMESPACE image-classification-pvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;42-delete-the-kubeflow-notebook&#34;&gt;4.2 Delete the Kubeflow Notebook&lt;/h3&gt;
&lt;p&gt;Login to the dashboard to stop and/or terminate any kubeflow notebooks you created for this session or use the following command -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete notebook -n $PVC_NAMESPACE &amp;lt;notebook-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the following command to delete the permissions job -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete pod -n $PVC_NAMESPACE $CLAIM_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;43-delete-pvc-pv-and-sc-in-the-following-order&#34;&gt;4.3 Delete PVC, PV and SC in the following order&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete pvc -n $PVC_NAMESPACE $CLAIM_NAME
kubectl delete pv efs-pv
kubectl delete sc efs-sc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;44-delete-the-efs-mount-targets-filesystem-and-security-group&#34;&gt;4.4 Delete the EFS mount targets, filesystem and security group&lt;/h3&gt;
&lt;p&gt;Use the steps in this &lt;a href=&#34;https://docs.aws.amazon.com/efs/latest/ug/delete-efs-fs.html&#34;&gt;AWS Guide&lt;/a&gt; to delete the EFS filesystem that you created.&lt;/p&gt;
&lt;h2 id=&#34;50-known-issues&#34;&gt;5.0 Known Issues:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When you rerun the &lt;code&gt;eksctl create iamserviceaccount&lt;/code&gt; to create and annotate the same service account multiple times, sometimes the role does not get overwritten. In such a case you may need to do one or both of the following -
a. Delete the cloudformation stack associated with this add-on role.
b. Delete the &lt;code&gt;efs-csi-controller-sa&lt;/code&gt; service account and then re-run the required steps. If you used the auto-script, you can rerun it by specifying the same &lt;code&gt;filesystem-name&lt;/code&gt; such that a new one is not created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have seen some issues when running these steps on multiple clusters sharing the same VPC.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FSx for Lustre</title>
      <link>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/storage/fsx-for-lustre/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/storage/fsx-for-lustre/guide/</guid>
      <description>
        
        
        &lt;p&gt;This guide describes how to use Amazon FSx as Persistent storage on top of an existing Kubeflow deployment.&lt;/p&gt;
&lt;h2 id=&#34;10-prerequisites&#34;&gt;1.0 Prerequisites&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For this README, we will assume that you already have an EKS Cluster with Kubeflow installed since the FSx CSI Driver can be installed and configured as a separate resource on top of an existing Kubeflow deployment. You can follow any of the other guides to complete these steps - choose one of the &lt;a href=&#34;../../../README.md#deployment-options&#34;&gt;AWS managed service integrated offering&lt;/a&gt; or &lt;a href=&#34;../../../vanilla/README.md&#34;&gt;vanilla distribution&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At this point, you have likely cloned this repo and checked out the right branch. Navigate to the current directory -&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd kubeflow-manifests/distributions/aws/examples/storage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Make sure the following environment variables are set.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLUSTER_NAME=&amp;lt;clustername&amp;gt;
export CLUSTER_REGION=&amp;lt;clusterregion&amp;gt;
export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query &amp;#34;Account&amp;#34; --output text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;20-setup-fsx-for-lustre&#34;&gt;2.0 Setup FSx for Lustre&lt;/h2&gt;
&lt;p&gt;You can either use Automated or Manual setup&lt;/p&gt;
&lt;h3 id=&#34;21-option-1-automated-setup&#34;&gt;2.1 [Option 1] Automated setup&lt;/h3&gt;
&lt;p&gt;The script automates all the Manual steps.&lt;br&gt;
It performs the required cluster configuration, creates an FSx file system and it also takes care of creating a storage class for static provisioning.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the script dependencies &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the script from the &lt;code&gt;tests/e2e&lt;/code&gt; directory -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;python utils/auto-fsx-setup.py --region $CLUSTER_REGION --cluster $CLUSTER_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;advanced-customization&#34;&gt;&lt;strong&gt;Advanced customization&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The script applies some default values for the file system name, performance mode etc. If you know what you are doing, you can see which options are customizable by executing &lt;code&gt;python utils/auto-efs-setup.py --help&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;22-option-2-manual-setup&#34;&gt;2.2 [Option 2] Manual setup&lt;/h3&gt;
&lt;h4 id=&#34;1-install-the-fsx-csi-driver&#34;&gt;1. Install the FSx CSI Driver&lt;/h4&gt;
&lt;p&gt;We recommend installing the FSx CSI Driver v0.7.1 directly from the &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-fsx-csi-driver&#34;&gt;the aws-fsx-csi-driver github repo&lt;/a&gt; as follows -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl apply -k &amp;#34;github.com/kubernetes-sigs/aws-fsx-csi-driver/deploy/kubernetes/overlays/stable/?ref=tags/v0.7.1&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can confirm that FSx CSI Driver was installed using the following command -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl get csidriver -A

NAME              ATTACHREQUIRED   PODINFOONMOUNT   MODES        AGE
fsx.csi.aws.com   false            false            Persistent   14s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-create-the-iam-policy-for-the-csi-driver&#34;&gt;2. Create the IAM Policy for the CSI Driver&lt;/h4&gt;
&lt;p&gt;The CSI driver&amp;rsquo;s service account (created during installation) requires IAM permission to make calls to AWS APIs on your behalf. Here, we will be annotating the Service Account &lt;code&gt;fsx-csi-controller-sa&lt;/code&gt; with an IAM Role which has the required permissions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the policy using the json file provided as follows -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;aws iam create-policy \
    --policy-name Amazon_FSx_Lustre_CSI_Driver \
    --policy-document file://fsx-for-lustre/fsx-csi-driver-policy.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create an IAM role and attach the IAM policy to it. Annotate the Kubernetes service account with the IAM role ARN and the IAM role with the Kubernetes service account name. You can create the role using eksctl as follows -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;eksctl create iamserviceaccount \
    --name fsx-csi-controller-sa \
    --namespace kube-system \
    --cluster $CLUSTER_NAME \
    --attach-policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/Amazon_FSx_Lustre_CSI_Driver \
    --region $CLUSTER_REGION \
    --approve \
    --override-existing-serviceaccounts 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;You can verify by describing the specified service account to check if it has been correctly annotated -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl describe -n kube-system serviceaccount fsx-csi-controller-sa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-create-an-instance-of-the-fsx-filesystem&#34;&gt;3. Create an Instance of the FSx Filesystem&lt;/h4&gt;
&lt;p&gt;Please refer to the official &lt;a href=&#34;https://docs.aws.amazon.com/fsx/latest/LustreGuide/getting-started-step1.html&#34;&gt;AWS FSx CSI Document&lt;/a&gt; for detailed instructions on creating an FSx filesystem.&lt;/p&gt;
&lt;p&gt;Note: For this README, we have assumed that you are creating your FSx Filesystem in the same VPC as your EKS Cluster.&lt;/p&gt;
&lt;h4 id=&#34;4-static-provisioning&#34;&gt;4. Static Provisioning&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kubeflow.org/docs/distributions/aws/customizing-aws/storage/#amazon-fsx-for-lustre&#34;&gt;Using this sample from official Kubeflow Docs&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the AWS Console to get the filesystem id of the FSx volume you want to use. You could also use the following command to list all the volumes available in your region. Either way, make sure that &lt;code&gt;file_system_id&lt;/code&gt; is set.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;aws fsx describe-file-systems --query &amp;#34;FileSystems[*].FileSystemId&amp;#34; --output text --region $CLUSTER_REGION
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export file_system_id=&amp;lt;fsx-id-to-use&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Once you have the filesystem id, Use the following command to retrieve DNSName, and MountName values.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export dns_name=$(aws fsx describe-file-systems --file-system-ids $file_system_id --query &amp;#34;FileSystems[0].DNSName&amp;#34; --output text --region $CLUSTER_REGION)

export mount_name=$(aws fsx describe-file-systems --file-system-ids $file_system_id --query &amp;#34;FileSystems[0].LustreConfiguration.MountName&amp;#34; --output text --region $CLUSTER_REGION)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Now edit the &lt;code&gt;fsx-for-lustre/static-provisioning/pv.yaml&lt;/code&gt; to replace &amp;lt;file_system_id&amp;gt;, &amp;lt;dns_name&amp;gt;, and &amp;lt;mount_name&amp;gt; with your values.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;yq e &amp;#39;.spec.csi.volumeHandle = env(file_system_id)&amp;#39; -i fsx-for-lustre/static-provisioning/pv.yaml
yq e &amp;#39;.spec.csi.volumeAttributes.dnsname = env(dns_name)&amp;#39; -i fsx-for-lustre/static-provisioning/pv.yaml
yq e &amp;#39;.spec.csi.volumeAttributes.mountname = env(mount_name)&amp;#39; -i fsx-for-lustre/static-provisioning/pv.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;The &lt;code&gt;PersistentVolume&lt;/code&gt; is a cluster scoped resource but the &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; needs to be in the namespace you will be accessing it from. Replace the &lt;code&gt;kubeflow-user-example-com&lt;/code&gt; namespace specified the below with the namespace for your kubeflow user and edit the &lt;code&gt;fsx-for-lustre/static-provisioning/pvc.yaml&lt;/code&gt; file accordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export PVC_NAMESPACE=kubeflow-user-example-com
yq e &amp;#39;.metadata.namespace = env(PVC_NAMESPACE)&amp;#39; -i fsx-for-lustre/static-provisioning/pvc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Now create the required &lt;code&gt;PersistentVolume&lt;/code&gt; and &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; resources as -&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl apply -f fsx-for-lustre/static-provisioning/pv.yaml
kubectl apply -f fsx-for-lustre/static-provisioning/pvc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Check your Setup
Use the following commands to ensure all resources have been deployed as expected and the PersistentVolume is correctly bound to the PersistentVolumeClaim&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl get pv

NAME    CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                 STORAGECLASS   REASON   AGE
fsx-pv  1200Gi     RWX            Recycle          Bound    kubeflow-user-example-com/fsx-claim                           11s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl get pvc -n $PVC_NAMESPACE

NAME        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE
fsx-claim   Bound    fsx-pv   1200Gi     RWX                           83s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, Port Forward as needed and Login to the Kubeflow dashboard. You can also check the &lt;code&gt;Volumes&lt;/code&gt; tab in Kubeflow and you should be able to see your PVC is available for use within Kubeflow.
In the following two sections we will be using this PVC to create a notebook server with Amazon FSx mounted as the workspace volume, download training data into this filesystem and then deploy a TFJob to train a model using this data.&lt;/p&gt;
&lt;h2 id=&#34;30-using-fsx-storage-in-kubeflow&#34;&gt;3.0 Using FSx Storage in Kubeflow&lt;/h2&gt;
&lt;h3 id=&#34;31-using-fsx-volume-as-workspace-or-data-volume-for-a-notebook-server&#34;&gt;3.1 Using FSx volume as workspace or data volume for a notebook server&lt;/h3&gt;
&lt;p&gt;Spin up a new Kubeflow notebook server and specify the name of the PVC to be used as the workspace volume or the data volume and specify your desired mount point. For our example here, we are using the AWS Optimized Tensorflow 2.6 CPU image provided in the notebook configuration options - &lt;code&gt;public.ecr.aws/c9e4w0g3/notebook-servers/jupyter-tensorflow&lt;/code&gt;. Additionally, use the existing &lt;code&gt;fsx-claim&lt;/code&gt; volume as the workspace volume at the default mount point &lt;code&gt;/home/jovyan&lt;/code&gt;. The server might take a few minutes to come up.&lt;/p&gt;
&lt;p&gt;In case the server does not start up in the expected time, do make sure to check -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Notebook Controller Logs&lt;/li&gt;
&lt;li&gt;The specific notebook server instance pod&amp;rsquo;s logs&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;note-about-permissions&#34;&gt;Note about Permissions&lt;/h3&gt;
&lt;p&gt;You might need to specify some additional directory permissions on your worker node before you can use these as mount points. By default, new Amazon FSx file systems are owned by root:root, and only the root user (UID 0) has read-write-execute permissions. If your containers are not running as root, you must change the Amazon FSx file system permissions to allow other users to modify the file system. The set-permission-job.yaml is an example of how you could set these permissions to be able to use the FSx as your workspace in your kubeflow notebook.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLAIM_NAME=fsx-claim
yq e &amp;#39;.metadata.name = env(CLAIM_NAME)&amp;#39; -i notebook-sample/set-permission-job.yaml
yq e &amp;#39;.metadata.namespace = env(PVC_NAMESPACE)&amp;#39; -i notebook-sample/set-permission-job.yaml
yq e &amp;#39;.spec.template.spec.volumes[0].persistentVolumeClaim.claimName = env(CLAIM_NAME)&amp;#39; -i notebook-sample/set-permission-job.yaml

kubectl apply -f notebook-sample/set-permission-job.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-using-fsx-volume-for-a-trainingjob-using-tfjob-operator&#34;&gt;3.2 Using FSx volume for a TrainingJob using TFJob Operator&lt;/h3&gt;
&lt;p&gt;The following section re-uses the PVC and the Tensorflow Kubeflow Notebook created in the previous steps to download a dataset to the FSx Volume. Then we spin up a TFjob which runs a image classification job using the data from the shared volume.
Source: &lt;a href=&#34;https://www.tensorflow.org/tutorials/load_data/images&#34;&gt;https://www.tensorflow.org/tutorials/load_data/images&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: The following steps are run from the terminal on your gateway node connected to your EKS cluster and not from the Kubeflow Notebook to test the PVC allowed sharing of data as expected.&lt;/p&gt;
&lt;h3 id=&#34;1-download-the-dataset-to-the-fsx-volume&#34;&gt;1. Download the dataset to the FSx Volume&lt;/h3&gt;
&lt;p&gt;In the Kubeflow Notebook created above, use the following snippet to download the data into the &lt;code&gt;/home/jovyan/.keras&lt;/code&gt; directory (which is mounted onto the FSx Volume).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import pathlib
import tensorflow as tf
dataset_url = &amp;#34;https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz&amp;#34;
data_dir = tf.keras.utils.get_file(origin=dataset_url,
                                   fname=&amp;#39;flower_photos&amp;#39;,
                                   untar=True)
data_dir = pathlib.Path(data_dir)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-build-and-push-the-docker-image&#34;&gt;2. Build and Push the Docker image&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;training-sample&lt;/code&gt; directory, we have provided a sample training script and Dockerfile which you can use as follows to build a docker image. Be sure to point the &lt;code&gt;$IMAGE_URI&lt;/code&gt; to your registry and specify an appropriate tag -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export IMAGE_URI=&amp;lt;dockerimage:tag&amp;gt;
cd training-sample

# You will need to login to ECR for the following steps
docker build -t $IMAGE_URI .
docker push $IMAGE_URI
cd -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-configure-the-tfjob-spec-file&#34;&gt;3. Configure the tfjob spec file&lt;/h3&gt;
&lt;p&gt;Once the docker image is built, replace the &lt;code&gt;&amp;lt;dockerimage:tag&amp;gt;&lt;/code&gt; in the &lt;code&gt;tfjob.yaml&lt;/code&gt; file, line #17.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;yq e &amp;#39;.spec.tfReplicaSpecs.Worker.template.spec.containers[0].image = env(IMAGE_URI)&amp;#39; -i training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, specify the name of the PVC you created -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLAIM_NAME=fsx-claim
yq e &amp;#39;.spec.tfReplicaSpecs.Worker.template.spec.volumes[0].persistentVolumeClaim.claimName = env(CLAIM_NAME)&amp;#39; -i training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure to run it in the same namespace as the claim -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;yq e &amp;#39;.metadata.namespace = env(PVC_NAMESPACE)&amp;#39; -i training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-create-the-tfjob-and-use-the-provided-commands-to-check-the-training-logs&#34;&gt;3. Create the TFjob and use the provided commands to check the training logs&lt;/h3&gt;
&lt;p&gt;At this point, we are ready to train the model using the &lt;code&gt;training-sample/training.py&lt;/code&gt; script and the data available on the shared volume with the Kubeflow TFJob operator as -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl apply -f training-sample/tfjob.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to check that the training job is running as expected, you can check the events in the TFJob describe response as well as the job logs as -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl describe tfjob image-classification-pvc -n $PVC_NAMESPACE
kubectl logs -n $PVC_NAMESPACE image-classification-pvc-worker-0 -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;60-cleanup&#34;&gt;6.0 Cleanup&lt;/h2&gt;
&lt;p&gt;This section cleans up the resources created in this README, to cleanup other resources such as the Kubeflow deployment, please refer to the high level README files.&lt;/p&gt;
&lt;h3 id=&#34;61-clean-up-the-tfjob&#34;&gt;6.1 Clean up the TFJob&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete tfjob -n $PVC_NAMESPACE image-classification-pvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;62-delete-the-kubeflow-notebook&#34;&gt;6.2 Delete the Kubeflow Notebook&lt;/h3&gt;
&lt;p&gt;Login to the dashboard to stop and/or terminate any kubeflow notebooks you created for this session or use the following command -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete notebook -n $PVC_NAMESPACE &amp;lt;notebook-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete pod -n $PVC_NAMESPACE $CLAIM_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;63-delete-pvc-pv-and-sc-in-the-following-order&#34;&gt;6.3 Delete PVC, PV and SC in the following order&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl delete pvc -n $PVC_NAMESPACE $CLAIM_NAME
kubectl delete pv fsx-pv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;64-delete-the-fsx-filesystem&#34;&gt;6.4 Delete the FSx filesystem&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;aws fsx delete-file-system --file-system-id $file_system_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure to delete any other resources you have created such as security groups via the AWS Console or using awscli.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: CloudWatch</title>
      <link>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/cloudwatch/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/cloudwatch/guide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;verify-prerequisites&#34;&gt;Verify Prerequisites&lt;/h2&gt;
&lt;p&gt;The EKS  Cluster will need IAM service account roles associated with CloudWatchAgentServerPolicy attached.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export CLUSTER_NAME=&amp;lt;&amp;gt;
export CLUSTER_REGION=&amp;lt;&amp;gt;

eksctl utils associate-iam-oidc-provider --region=$CLUSTER_REGION --cluster=$CLUSTER_NAME --approve
eksctl create iamserviceaccount --name cloudwatch-agent --namespace amazon-cloudwatch --cluster $CLUSTER_NAME --region $CLUSTER_REGION cloudwatch-agent --approve --override-existing-serviceaccounts --attach-policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
eksctl create iamserviceaccount --name fluent-bit --namespace amazon-cloudwatch --cluster $CLUSTER_NAME --region $CLUSTER_REGION --approve --override-existing-serviceaccounts --attach-policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;p&gt;To install an optimized quick start configuration enter the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;FluentBitHttpPort=&amp;#39;2020&amp;#39;
FluentBitReadFromHead=&amp;#39;Off&amp;#39;
[[ ${FluentBitReadFromHead} = &amp;#39;On&amp;#39; ]] &amp;amp;&amp;amp; FluentBitReadFromTail=&amp;#39;Off&amp;#39;|| FluentBitReadFromTail=&amp;#39;On&amp;#39;
[[ -z ${FluentBitHttpPort} ]] &amp;amp;&amp;amp; FluentBitHttpServer=&amp;#39;Off&amp;#39; || FluentBitHttpServer=&amp;#39;On&amp;#39;
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluent-bit-quickstart.yaml | sed &amp;#39;s/{{cluster_name}}/&amp;#39;${CLUSTER_NAME}&amp;#39;/;s/{{region_name}}/&amp;#39;${CLUSTER_REGION}&amp;#39;/;s/{{http_server_toggle}}/&amp;#34;&amp;#39;${FluentBitHttpServer}&amp;#39;&amp;#34;/;s/{{http_server_port}}/&amp;#34;&amp;#39;${FluentBitHttpPort}&amp;#39;&amp;#34;/;s/{{read_from_head}}/&amp;#34;&amp;#39;${FluentBitReadFromHead}&amp;#39;&amp;#34;/;s/{{read_from_tail}}/&amp;#34;&amp;#39;${FluentBitReadFromTail}&amp;#39;&amp;#34;/&amp;#39; | kubectl apply -f - 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify the installation you can run the following command to see that metrics have been created. Note that it may take up to 15 minutes for the metrics to populate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;aws cloudwatch list-metrics --namespace ContainerInsights --region $CLUSTER_REGION
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An example of the logs which will be available after installation are the logs of the pods on your cluster. This way the pod logs can still be accessed past their default storage time. Also allows for an easy way to view logs for all pods on your cluster without having to directly connect to your EKS cluster.&lt;/p&gt;
&lt;p&gt;The logs can be accessed by through CloudWatch log groups &lt;img src=&#34;./images/cloudwatch-logs.png&#34; alt=&#34;cloudwatch&#34;&gt;&lt;/p&gt;
&lt;p&gt;To view individual pod logs select /aws/containerinsights/YOUR_CLUSTER_NAME/application &lt;img src=&#34;./images/cloudwatch-application-logs.png&#34; alt=&#34;application&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is an example of the jupyter-web-app pods logs available through CloudWatch &lt;img src=&#34;./images/cloudwatch-pod-logs.png&#34; alt=&#34;jupyter-logs&#34;&gt;&lt;/p&gt;
&lt;p&gt;An example of the metrics that will be available after installation are pod_network_tx_bytes. The full list of metrics that are provided by default can be found &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics-EKS.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The metrics are grouped by varying different parameters such as Cluster,Namespace,PodName
&lt;img src=&#34;./images/cloudwatch-metrics.png&#34; alt=&#34;cloudwatch-metrics&#34;&gt;&lt;/p&gt;
&lt;p&gt;An example of the graphed metrics for the istio-system namespace which deals with internet traffic
&lt;img src=&#34;./images/cloudwatch-namespace-metrics.png&#34; alt=&#34;cloudwatch-namespace-metrics&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following guide provides instructions on viewing CloudWatch metrics &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/viewing_metrics_with_cloudwatch.html&#34;&gt;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/viewing_metrics_with_cloudwatch.html&lt;/a&gt; the metric namespace to select is ContainerInsights&lt;/p&gt;
&lt;p&gt;You can see the full list of logs and metrics through &lt;a href=&#34;https://console.aws.amazon.com/cloudwatch/&#34;&gt;https://console.aws.amazon.com/cloudwatch/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;uninstall&#34;&gt;Uninstall&lt;/h2&gt;
&lt;p&gt;To uninstall CloudWatch ContainerInsights enter the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluent-bit-quickstart.yaml | sed &amp;#39;s/{{cluster_name}}/&amp;#39;${ClusterName}&amp;#39;/;s/{{region_name}}/&amp;#39;${LogRegion}&amp;#39;/;s/{{http_server_toggle}}/&amp;#34;&amp;#39;${FluentBitHttpServer}&amp;#39;&amp;#34;/;s/{{http_server_port}}/&amp;#34;&amp;#39;${FluentBitHttpPort}&amp;#39;&amp;#34;/;s/{{read_from_head}}/&amp;#34;&amp;#39;${FluentBitReadFromHead}&amp;#39;&amp;#34;/;s/{{read_from_tail}}/&amp;#34;&amp;#39;${FluentBitReadFromTail}&amp;#39;&amp;#34;/&amp;#39; | kubectl delete -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h2&gt;
&lt;p&gt;Full documentation and additional configuration options are available through EKS &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-setup-EKS-quickstart.html&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Load Balancer</title>
      <link>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/load-balancer/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rrrkharse.github.io/kubeflow-manifests-docsy-submodule/docs/deployment/install/add-ons/load-balancer/guide/</guid>
      <description>
        
        
        &lt;p&gt;This tutorial shows how to expose Kubeflow over a load balancer on AWS.&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;
&lt;p&gt;Follow this guide only if you are &lt;strong&gt;not&lt;/strong&gt; using &lt;code&gt;Cognito&lt;/code&gt; as the authentication provider in your deployment. Cognito integrated deployment is configured with AWS Load Balancer controller by default to create an ingress managed application load balancer and exposes Kubeflow via a hosted domain.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Kubeflow does not offer a generic solution for connecting to Kubeflow over a load balancer because this process is highly dependent on your environment/cloud provider. On AWS, we use the &lt;a href=&#34;https://kubernetes-sigs.github.io/aws-load-balancer-controller/&#34;&gt;AWS Load Balancer controller&lt;/a&gt; which satisfies the Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;Ingress resource&lt;/a&gt; to create an &lt;a href=&#34;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html&#34;&gt;Application Load Balancer&lt;/a&gt; (ALB). When you create a Kubernetes &lt;code&gt;Ingress&lt;/code&gt;, an ALB is provisioned that load balances application traffic.&lt;/p&gt;
&lt;p&gt;In order to connect to Kubeflow using a LoadBalancer, we need to setup HTTPS. The reason is that many of the Kubeflow web apps (e.g., Tensorboard Web App, Jupyter Web App, Katib UI) use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies&#34;&gt;Secure Cookies&lt;/a&gt;, so accessing Kubeflow with HTTP over a non-localhost domain does not work.&lt;/p&gt;
&lt;p&gt;To secure the traffic and use HTTPS, we must associate a Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate with the load balancer. &lt;a href=&#34;https://aws.amazon.com/certificate-manager/&#34;&gt;AWS Certificate Manager&lt;/a&gt; is a service that lets you easily provision, manage, and deploy public and private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services and your internal connected resources. To create a certificate for use with the load balancer, &lt;a href=&#34;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates&#34;&gt;you must specify a domain name&lt;/a&gt; i.e. certificates cannot be created for ALB DNS. You can register your domain using any domain service provider such as &lt;a href=&#34;https://aws.amazon.com/route53/&#34;&gt;Route53&lt;/a&gt;, GoDoddy etc.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Kubeflow deployment on EKS with Dex as auth provider(default in &lt;a href=&#34;../../vanilla/README.md&#34;&gt;Vanilla&lt;/a&gt; Kubeflow).&lt;/li&gt;
&lt;li&gt;Installed the tools mentioned in &lt;a href=&#34;../../vanilla/README.md#prerequisites&#34;&gt;prerequisite section of this&lt;/a&gt; document on the client machine.&lt;/li&gt;
&lt;li&gt;Verify you are connected to right cluster, cluster has compute and the aws region is set to the region of cluster.
&lt;ol&gt;
&lt;li&gt;Verify cluster name and region are exported
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;echo $CLUSTER_REGION
echo $CLUSTER_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Display the current cluster kubeconfig points to
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kubectl config current-context
aws eks describe-cluster --name $CLUSTER_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Verify the current directory is the root of the repository by running the &lt;code&gt;pwd&lt;/code&gt; command. The output should be &lt;code&gt;&amp;lt;path/to/kubeflow-manifests&amp;gt;&lt;/code&gt; directory&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;create-load-balancer&#34;&gt;Create Load Balancer&lt;/h2&gt;
&lt;p&gt;To make it easy to create the load balancer, you can use the &lt;a href=&#34;#automated-script&#34;&gt;script provided in this section&lt;/a&gt;. If you prefer to use the automated scripts, you need to only execute the steps in the &lt;a href=&#34;#automated-script&#34;&gt;automated script section&lt;/a&gt;. Read the following sections in this guide to understand what happens when you run the script or execute all the steps if you prefer to do it manually/hands-on.&lt;/p&gt;
&lt;h3 id=&#34;create-domain-and-certificates&#34;&gt;Create Domain and Certificates&lt;/h3&gt;
&lt;p&gt;As explained in the background section, you need a registered domain and TLS certificate to use HTTPS with load balancer. Since your top level domain(e.g. &lt;code&gt;example.com&lt;/code&gt;) could have been registered at any service provider, for uniformity and taking advantage of the integration provided between Route53, ACM and Application Load Balancer, you will create a separate &lt;a href=&#34;https://en.wikipedia.org/wiki/Subdomain&#34;&gt;sudomain&lt;/a&gt; (e.g. &lt;code&gt;platform.example.com&lt;/code&gt;) to host Kubeflow and a corresponding hosted zone in Route53 to route traffic for this subdomain. To get TLS support, you will need certificates for both the root domain(&lt;code&gt;*.example.com&lt;/code&gt;) and subdomain(&lt;code&gt;*.platform.example.com&lt;/code&gt;) in the region where your platform will be running(i.e. EKS cluster region).&lt;/p&gt;
&lt;h4 id=&#34;create-a-subdomain&#34;&gt;Create a subdomain&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Register a domain in any domain provider like &lt;a href=&#34;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register.html&#34;&gt;Route 53&lt;/a&gt; or GoDaddy.com etc. Lets assume this domain is &lt;code&gt;example.com&lt;/code&gt;. It is handy to have a domain managed by Route53 to deal with all the DNS records you will have to add (wildcard for ALB DNS, validation for the certificate manager, etc)&lt;/li&gt;
&lt;li&gt;Goto Route53 and create a subdomain to host kubeflow:
&lt;ol&gt;
&lt;li&gt;Create a hosted zone for the desired subdomain e.g. &lt;code&gt;platform.example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy the value of NS type record from the subdomain hosted zone (&lt;code&gt;platform.example.com&lt;/code&gt;)
&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;./files/subdomain-NS.png&#34; alt=&#34;subdomain-NS&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;NS&lt;/code&gt; type of record in the root &lt;code&gt;example.com&lt;/code&gt; hosted zone for the subdomain &lt;code&gt;platform.example.com&lt;/code&gt;.
&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;./files/root-domain-NS-creating-NS.png&#34; alt=&#34;root-domain-NS-creating-NS&#34;&gt;&lt;/li&gt;
&lt;li&gt;Following is a screenshot of the record after creation in &lt;code&gt;example.com&lt;/code&gt; hosted zone.
&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;./files/root-domain-NS-created.png&#34; alt=&#34;root-domain-NS-created&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From this point onwards, we will be creating/updating the DNS records &lt;strong&gt;only in the subdomain&lt;/strong&gt;. All the screenshots of hosted zone in the following sections/steps of this guide are for the subdomain.&lt;/p&gt;
&lt;h4 id=&#34;create-certificates-for-domain&#34;&gt;Create certificates for domain&lt;/h4&gt;
&lt;p&gt;Create the certificates for the domains in the region where your platform will be running(i.e. EKS cluster region) by following &lt;a href=&#34;https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html#request-public-console&#34;&gt;this document&lt;/a&gt; in the specified order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ceritificates are valid only after successful &lt;a href=&#34;https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html&#34;&gt;validation of domain ownership&lt;/a&gt;
- Following is a screenshot showing a certificate has been issued. Note: Status turns to &lt;code&gt;Issued&lt;/code&gt; after few minutes of validation.
- &lt;img src=&#34;./files/successfully-issued-certificate.png&#34; alt=&#34;successfully-issued-certificate&#34;&gt;&lt;/li&gt;
&lt;li&gt;If you choose DNS validation for the validation of the certificates, you will be asked to create a CNAME type record in the hosted zone.
- Following is a screenshot of CNAME record of the certificate in &lt;code&gt;platform.example.com&lt;/code&gt; hosted zone for DNS validation:
- &lt;img src=&#34;./files/DNS-record-for-certificate-validation.png&#34; alt=&#34;DNS-record-for-certificate-validation&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Create a certificate for &lt;code&gt;*.example.com&lt;/code&gt; in the region where your platform will be running&lt;/li&gt;
&lt;li&gt;Create a certificate for &lt;code&gt;*.platform.example.com&lt;/code&gt; in the region where your platform will be running&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;configure-ingress&#34;&gt;Configure Ingress&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Export the ARN of the certificate created for &lt;code&gt;*.platform.example.com&lt;/code&gt;:
1. &lt;code&gt;export certArn=&amp;lt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configure the parameters for &lt;a href=&#34;../../../../awsconfigs/common/istio-ingress/overlays/https/params.env&#34;&gt;ingress&lt;/a&gt; with the certificate ARN of the subdomain
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; printf &amp;#39;certArn=&amp;#39;$certArn&amp;#39;&amp;#39; &amp;gt; awsconfigs/common/istio-ingress/overlays/https/params.env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;configure-load-balancer-controller&#34;&gt;Configure Load Balancer Controller&lt;/h3&gt;
&lt;p&gt;Setup resources required for the load balancer controller:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure all the subnets(public and private) corresponding to the EKS cluster are tagged according to the &lt;code&gt;Prerequisites&lt;/code&gt; section in this &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html&#34;&gt;document&lt;/a&gt;. Ignore the requirement to have an existing ALB provisioned on the cluster. We will be deploying load balancer controller version 1.1.5 in the later section.
&lt;ol&gt;
&lt;li&gt;Specifically check if the following tags exist on the subnets:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/cluster/cluster-name&lt;/code&gt; (replace &lt;code&gt;cluster-name&lt;/code&gt; with your cluster name e.g. &lt;code&gt;kubernetes.io/cluster/my-k8s-cluster&lt;/code&gt;). Add this tag in both private and public subnets. If you created the cluster using eksctl, you might be missing only this tag. Use the following command to tag all subnets by substituting the value of &lt;code&gt;TAG_VALUE&lt;/code&gt; variable(&lt;code&gt;owned&lt;/code&gt; or &lt;code&gt;shared&lt;/code&gt;). Use &lt;code&gt;shared&lt;/code&gt; as tag value if you have more than one cluster using the subnets:
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;  export TAG_VALUE=&amp;lt;&amp;gt;
  export CLUSTER_SUBNET_IDS=$(aws ec2 describe-subnets --region $CLUSTER_REGION --filters Name=tag:alpha.eksctl.io/cluster-name,Values=$CLUSTER_NAME --output json | jq -r &amp;#39;.Subnets[].SubnetId&amp;#39;)
  for i in &amp;#34;${CLUSTER_SUBNET_IDS[@]}&amp;#34;
  do
      aws ec2 create-tags --resources ${i} --tags Key=kubernetes.io/cluster/${CLUSTER_NAME},Value=${TAG_VALUE}
  done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/role/internal-elb&lt;/code&gt;. Add this tag only to private subnets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/role/elb&lt;/code&gt;. Add this tag only to public subnets&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Load balancer controller will use &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html&#34;&gt;IAM roles for service accounts&lt;/a&gt;(IRSA) to access AWS services. An OIDC provider must exist for your cluster to use IRSA. Create an OIDC provider and associate it with for your EKS cluster by running the following command if your cluster doesnâ€™t already have one:
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;eksctl utils associate-iam-oidc-provider --cluster ${CLUSTER_NAME} --region ${CLUSTER_REGION} --approve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Create an IAM role with &lt;a href=&#34;../../../../awsconfigs/infra_configs/iam_alb_ingress_policy.json&#34;&gt;these permissions&lt;/a&gt; for the load balancer controller to use via a service account to access AWS services.
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; export LBC_POLICY_NAME=alb_ingress_controller_${CLUSTER_REGION}_${CLUSTER_NAME}
 export LBC_POLICY_ARN=$(aws iam create-policy --policy-name $LBC_POLICY_NAME --policy-document file://awsconfigs/infra_configs/iam_alb_ingress_policy.json --output text --query &amp;#39;Policy.Arn&amp;#39;)
 eksctl create iamserviceaccount --name alb-ingress-controller --namespace kubeflow --cluster ${CLUSTER_NAME} --region ${CLUSTER_REGION} --attach-policy-arn ${LBC_POLICY_ARN} --override-existing-serviceaccounts --approve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Configure the parameters for &lt;a href=&#34;../../../../awsconfigs/common/aws-alb-ingress-controller/base/params.env&#34;&gt;load balancer controller&lt;/a&gt; with the cluster name
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; printf &amp;#39;clusterName=&amp;#39;$CLUSTER_NAME&amp;#39;&amp;#39; &amp;gt; awsconfigs/common/aws-alb-ingress-controller/base/params.env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;build-manifests-and-deploy-components&#34;&gt;Build Manifests and deploy components&lt;/h3&gt;
&lt;p&gt;Run the following command to build and install the components specified in this &lt;a href=&#34;./kustomization.yaml&#34;&gt;kustomize&lt;/a&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;kustomize build docs/deployment/add-ons/load-balancer | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;update-the-domain-with-alb-address&#34;&gt;Update the domain with ALB address&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check if ALB is provisioned. It takes around 3-5 minutes&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; kubectl get ingress -n istio-system istio-ingress
 NAME            CLASS    HOSTS   ADDRESS                                                                  PORTS   AGE
 istio-ingress   &amp;lt;none&amp;gt;   *       xxxxxx-istiosystem-istio-2af2-1100502020.us-west-2.elb.amazonaws.com   80      15d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;ADDRESS&lt;/code&gt; is empty after a few minutes, check the logs of controller by following &lt;a href=&#34;https://www.kubeflow.org/docs/distributions/aws/troubleshooting-aws/#alb-fails-to-provision&#34;&gt;this guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When ALB is ready, copy the DNS name of that load balancer and create a CNAME entry to it in Route53 under subdomain (&lt;code&gt;platform.example.com&lt;/code&gt;) for &lt;code&gt;*.platform.example.com&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;./files/subdomain-*.platform-record.png&#34; alt=&#34;subdomain-*.platform-record&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The central dashboard should now be available at &lt;code&gt;https://kubeflow.platform.example.com&lt;/code&gt;. Open a browser and navigate to this URL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;automated-script&#34;&gt;Automated script&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install dependencies for the script
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd tests/e2e
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Substitute values in &lt;code&gt;tests/e2e/utils/load_balancer/config.yaml&lt;/code&gt;.
&lt;ol&gt;
&lt;li&gt;Registed root domain in &lt;code&gt;route53.rootDomain.name&lt;/code&gt;. Lets assume this domain is &lt;code&gt;example.com&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;If your domain is managed in route53, enter the Hosted zone ID found under Hosted zone details in &lt;code&gt;route53.rootDomain.hostedZoneId&lt;/code&gt;. Skip this step if your domain is managed by other domain provider.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Name of the sudomain you want to host Kubeflow (e.g. &lt;code&gt;platform.example.com&lt;/code&gt;) in &lt;code&gt;route53.subDomain.name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cluster name and region where kubeflow is deployed in &lt;code&gt;cluster.name&lt;/code&gt; and &lt;code&gt;cluster.region&lt;/code&gt; (e.g. us-west-2) respectively.&lt;/li&gt;
&lt;li&gt;The config file will look something like:
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; cluster:
     name: kube-eks-cluster
     region: us-west-2
 route53:
     rootDomain:
         hostedZoneId: XXXX
         name: example.com
     subDomain:
         name: platform.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Run the script to create the resources
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; PYTHONPATH=.. python utils/load_balancer/setup_load_balancer.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The script will update the config file with the resource names/ids/ARNs it created. Following is a sample:
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; kubeflow:
     alb:
         dns: xxxxxx-istiosystem-istio-2af2-1100502020.us-west-2.elb.amazonaws.com
         serviceAccount:
             name: alb-ingress-controller
             namespace: kubeflow
             policyArn: arn:aws:iam::123456789012:policy/alb_ingress_controller_kube-eks-clusterxxx
 cluster:
     name: kube-eks-cluster
     region: us-west-2
 route53:
     rootDomain:
         certARN: arn:aws:acm:us-west-2:123456789012:certificate/9d8c4bbc-3b02-4a48-8c7d-d91441c6e5af
         hostedZoneId: XXXXX
         name: example.com
     subDomain:
         certARN: arn:aws:acm:us-west-2:123456789012:certificate/d1d7b641c238-4bc7-f525-b7bf-373cc726
         hostedZoneId: XXXXX
         name: platform.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The central dashboard should now be available at &lt;code&gt;https://kubeflow.platform.example.com&lt;/code&gt;. Open a browser and navigate to this URL.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;clean-up&#34;&gt;Clean up&lt;/h2&gt;
&lt;p&gt;To delete the resources created in this guide, run the following commands from the root of repository:
Make sure you have the configuration file created by the script in &lt;code&gt;tests/e2e/utils/load_balancer/config.yaml&lt;/code&gt;. If you did not use the script, plugin the name/ARN/id of the resources you created in the configuration file by referring the sample in Step 4 of &lt;a href=&#34;#automated-script&#34;&gt;previous section&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd tests/e2e
PYTHONPATH=.. python utils/load_balancer/lb_resources_cleanup.py
cd -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
